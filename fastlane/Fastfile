# Customise this file, documentation can be found here:
# https://github.com/fastlane/fastlane/tree/master/docs
# All available actions: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Actions.md
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

# By default, fastlane will send which actions are used
# No personal data is shared, more information on https://github.com/fastlane/enhancer
# Uncomment the following line to opt out
# opt_out_usage

# If you want to automatically update fastlane if a new version is available:
# update_fastlane

# This is the minimum version number required.
# Update this, if you use features of a newer version
fastlane_version "2.9.0"

default_platform :ios

Verbose_mode = 'false'
Login_keychain_relative_path = '~/Library/Keychains/login.keychain'
Crashlytics_relative_path = './portkey/External/Crashlytics.framework/'
Appstore_match_repo = 'git@github.com:airtimemedia/portkey-certificates.git'
Enterprise_match_repo ='git@github.com:airtimemedia/portkey-certificates-enterprise.git'
Login_keychain_password = 'airtime'

platform :ios do

  #**************************
  # => LANES
  #**************************

  desc 'Runs all the tests'
  lane :test do
    scan(scheme: "portkey-unit-tests")
    scan(scheme: "portkey-functional-tests")
  end

  desc "Build with Enterprise Signing, pointed at Production environment"
  desc "To build AND send to fabric, run: fastlane enterprise_prod_build fabric:true"
  lane :enterprise_prod_build do |options|

    enterprise_match('com.signal.portkey.enterprise')
    enterprise_match('com.signal.portkey.enterprise.extension')
    enterprise_match('com.signal.portkey.enterprise.notifications')

    gym(
      scheme: "portkey-enterprise", 
      disable_xcpretty: Verbose_mode, 
      clean: "true", 
      verbose: Verbose_mode,
      use_legacy_build_api:'true'
      )

    if options != nil and options[:fabric]
      send_to_fabric
    end
   
  end

  desc "Build with Enterprise Signing, pointed at Staging environment"
  desc "To build AND send to fabric, run: fastlane enterprise_stage_build fabric:true"
  lane :enterprise_stage_build do |options|

    enterprise_match('com.signal.portkey.enterprise-stage')
    enterprise_match('com.signal.portkey.enterprise-stage.extension')
    enterprise_match('com.signal.portkey.enterprise-stage.notifications')
    
    gym(
      scheme: "portkey-enterprise-stage", 
      disable_xcpretty: Verbose_mode, 
      clean: "true", 
      verbose: Verbose_mode,
      use_legacy_build_api:'true',
      )

    if options != nil and options[:fabric] 
      send_to_fabric
    end

  end

  desc 'Build with App Store Signing, pointed at Production environment'
  desc 'To build AND submit to TestFlight, run: fastlane appstore_build testflight:true'
  desc 'To build AND submit to Fabric, run: fastlane appstore_build fabric:true'
  lane :appstore_build do |options|
    
    set_info_plist_value(path:"./portkey/Supporting Files/Info.plist", key: "CFBundleVersion", value: ENV["BUNDLE_VERSION"])
    set_info_plist_value(path:"./portkey-extension/Supporting Files/Info.plist", key: "CFBundleVersion", value: ENV["BUNDLE_VERSION"])
    set_info_plist_value(path:"./portkey-notifications/Supporting Files/Info.plist", key: "CFBundleVersion", value: ENV["BUNDLE_VERSION"])
    match(app_identifier:"is.signal.ios", type: "appstore", git_url:Appstore_match_repo) # more information: https://codesigning.guide
    match(app_identifier:"is.signal.ios.signal-extension", type: "appstore", git_url:Appstore_match_repo) # more information: https://codesigning.guide
    match(app_identifier:"is.signal.ios.notifications", type: "appstore", git_url:Appstore_match_repo) # more information: https://codesigning.guide
    gym(scheme: "portkey-prod") # Build your app - more options available

    if options != nil and options[:testflight] 
      pilot
    end
    if options != nil and options[:fabric] 
      send_to_fabric
    end
    
  end



  desc 'Build portkey-stage (local development) target, pointed at staging'
  desc "To build AND send to fabric, run: fastlane portkey_stage_build fabric:true"
  lane :portkey_stage_build do |options|

    enterprise_match('com.signal.portkey-stage')
    enterprise_match('com.signal.portkey-stage.portkey-stage-extension')
    enterprise_match('com.signal.portkey-stage.notifications')

    ENV['MATCH_TYPE'] = 'development'

    gym(
      scheme: "portkey-stage", 
      disable_xcpretty: Verbose_mode, 
      clean: "true", 
      verbose: Verbose_mode,
      use_legacy_build_api:'true',
      )

    if options != nil and options[:fabric] 
      send_to_fabric
    end

  end

  desc 'Build ALL targets. (this will take a while)'
  desc 'intended to be run on Jenkins, otherwise you will get prompted for info'
  lane :build_all do

    portkey_stage_build
    appstore_build
    enterprise_stage_build
    enterprise_prod_build

  end

  #**************************
  # => UTILITY FUNCTIONS
  #**************************

  def prepare_build_environment
    # ENV["SLACK_URL"] = "https://hooks.slack.com/services/..." #
    
    ENV['DEVELOPER_DIR'] = '/Applications/Xcode-8.2.1.app/Contents/Developer'

    Dir.chdir('../'){ %x('./up.sh') }

    set_info_plist_value(path:"./portkey/Supporting Files/Info.plist", key: "CFBundleVersion", value: ENV["BUILD_NUMBER"])
    set_info_plist_value(path:"./portkey-extension/Supporting Files/Info.plist", key: "CFBundleVersion", value: ENV["BUILD_NUMBER"])
    set_info_plist_value(path:"./portkey-notifications/Supporting Files/Info.plist", key: "CFBundleVersion", value: ENV["BUILD_NUMBER"])

    sh "security delete-keychain ios-build.keychain || true" #remove keychain created by old build process

    sh "security -v unlock-keychain -p #{Login_keychain_password} #{Login_keychain_relative_path}"
    
    sh "security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k #{Login_keychain_password} #{Login_keychain_relative_path}"
    
    sh "security set-keychain-settings -t 3600 #{Login_keychain_relative_path}"
  end

  def enterprise_match(app_name)
    sh "MATCH_FORCE_ENTERPRISE='1' fastlane match enterprise --verbose '1' --username abby@airtime.com --keychain_name #{Login_keychain_relative_path} --git_url #{Enterprise_match_repo} -b 8TJ4VFPP54 -a #{app_name}"
  end

  def send_to_fabric()
    crashlytics(
      crashlytics_path: Crashlytics_relative_path, 
      api_token: "5fc5a77f37e675e9b525226784a3494a113a92b2", 
      build_secret: "3bbf6f91376a31f23f1d0ff8937462361b9c6f70cc80d8674a7c5f434c2584ac",
      groups:ENV['fabric_distribution_alias'],
      notes:ENV['fabric_notes'],
      emails:ENV['fabric_emails']
      )
  end 
  
  #**************************
  # => FASTLANE CALLBACKS
  #**************************

  before_all do
      prepare_build_environment
  end

  after_all do |lane|
    # This block is called, only if the executed lane was successful

    # slack(
    #   message: "Successfully deployed new App Update."
    # )
  end

  error do |lane, exception|
    # slack(
    #   message: exception.message,
    #   success: false
    # )
  end
end